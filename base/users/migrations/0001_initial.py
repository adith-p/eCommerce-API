# Generated by Django 4.2.7 on 2023-11-15 06:16

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("product", "0002_product_model_pr_stock"),
    ]

    operations = [
        migrations.CreateModel(
            name="Users",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Wishlist",
            fields=[
                (
                    "wishlist_id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="wish_user_id",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "whishlist_item",
                    models.ManyToManyField(
                        related_name="whishlist_item", to="product.product_model"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ShoppingCart",
            fields=[
                (
                    "shopping_id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "shopping_item",
                    models.ManyToManyField(
                        related_name="shopping_item", to="product.product_model"
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cart_user_id",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Orders",
            fields=[
                (
                    "order_id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ordered", "Ordered"),
                            ("shipped", "Shipped"),
                            ("delivery", "Delivery"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "order_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="order_item",
                        to="product.product_model",
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="order_user_id",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="address",
            fields=[
                (
                    "adress_id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("street", models.CharField(max_length=255)),
                (
                    "city",
                    models.CharField(
                        choices=[
                            ("KOCH", "Kochi"),
                            ("BLR", "Bangalore"),
                            ("CHN", "Chennai"),
                            ("HYD", "Hyderabad"),
                            ("AMD", "Ahmedabad"),
                            ("KOL", "Kolkata"),
                            ("SUR", "Surat"),
                            ("PUN", "Pune"),
                            ("JAI", "Jaipur"),
                            ("LKO", "Lucknow"),
                            ("KAN", "Kanpur"),
                            ("NAG", "Nagpur"),
                            ("IND", "Indore"),
                            ("THA", "Thane"),
                            ("PCM", "Pimpri-Chinchwad"),
                            ("AMDC", "Ahmedabad City"),
                            ("VAD", "Vadodara"),
                            ("GZB", "Ghaziabad"),
                            ("LUD", "Ludhiana"),
                            ("AGR", "Agra"),
                            ("SMC", "Surat Municipal Corporation"),
                            ("MER", "Meerut"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("Andhra Pradesh", "AP"),
                            ("Arunachal Pradesh", "AR"),
                            ("Assam", "AS"),
                            ("Bihar", "BR"),
                            ("Chhattisgarh", "CG"),
                            ("Goa", "GA"),
                            ("Gujarat", "GJ"),
                            ("Haryana", "HR"),
                            ("Himachal Pradesh", "HP"),
                            ("Jharkhand", "JH"),
                            ("Karnataka", "KA"),
                            ("Kerala", "KL"),
                            ("Madhya Pradesh", "MP"),
                            ("Maharashtra", "MH"),
                            ("Manipur", "MN"),
                            ("Meghalaya", "ML"),
                            ("Mizoram", "MZ"),
                            ("Nagaland", "NL"),
                            ("Odisha", "OD"),
                            ("Punjab", "PB"),
                            ("Rajasthan", "RJ"),
                            ("Sikkim", "SK"),
                            ("Tamil Nadu", "TN"),
                            ("Telangana", "TS"),
                            ("Tripura", "TR"),
                            ("Uttar Pradesh", "UP"),
                            ("Uttarakhand", "UK"),
                            ("West Bengal", "WB"),
                            ("Andaman and Nicobar Islands", "AN"),
                            ("Chandigarh", "CH"),
                            ("Dadra and Nagar Haveli and Daman and Diu", "DN"),
                            ("Lakshadweep", "LD"),
                            ("Delhi", "DL"),
                            ("Puducherry", "PY"),
                        ],
                        max_length=100,
                    ),
                ),
                ("zipcode", models.BigIntegerField()),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_id",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]
